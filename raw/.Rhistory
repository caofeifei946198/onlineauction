x  <- c(1,2,3,4,5,6,7,8)
mean(x)
sd(x)
n <- length(x)
mean(x) <- sum(x)/n
meanx <- sum(x)/n
css <- sum((x - meanx)^2)
sdx <- sqrt(css / (n-1))
meanx
sdx
x <- pretty(c(-3,3), 10)
y <- dnorm(x)
plot(x,y, type = "1", xlab = "normal Deviate", ylab = "density", yaxs="i")
plot(x,y, type = "l", xlab = "normal Deviate", ylab = "density", yaxs="i")
runif(5)
runif(5)
set.seed(1234)
runif(5)
set.seed(1234)
runif(5)
library(MASS)
options(digits=3)
set.seed(1234)
mean <- c(230.7, 146.7, 3.6)
sigma <- matrix(c(15160.8, 6721.2, -47.1, 6721.2, 4700.9, -16.5, -47.1, -16.5, 0.3), nrow = 3, ncol = 3)
mydata <- mvrnorm(500, mean, sigma)
mydata <- as.data.frame(mydata)
names(mydata) <- c("y", "x1","x2")
dim(mydata)
head(mydata, n=10)
name <- "Bob"
cat("hello", name, "\b.\n", "Isn\'t R", "\t", "GREAT?\n")
a <- 5
aqrt(a)
sqrt(a)
b <- c(1.243, 5.654, 2.99)
round(b)
c <- matrix(runif(12), nrow=3)
c
log(c)
mean(c)
mydata <- matrix(rmorm(30), nrow=6)
mydata <- matrix(rnorm(30), nrow=6)
mydata
apply(mydata, 1,mean)
apply(mydata, 2,mean)
apply(mydata, 2,mean, trim = 0.2)
options(digits=2)
student <- c()
quit()
pwd
getwd()
cd /Rtest
chdir("rtest")
feelings <- c("sad","afriad")
for (i in feelings):
print(switch(i,
happy = "I am glad you are happy",
afraid = "there is nothing is fear",
sad = "cheer up",
angry ="calm down now"))
for (i in feelings):
print(switch(i,
happy = "I am glad you are happy",
afraid = "there is nothing is fear",
sad = "cheer up",
angry ="calm down now"))
feelings <- c("sad","afraid")
for (i in feelings):
print(switch(i,
happy = "I am glad you are happy",
afraid = "there is nothing is fear",
sad = "cheer up",
angry ="calm down now"))
feelings <- c("sad","afraid")
for (i in feelings)
print(switch(i,
happy = "I am glad you are happy",
afraid = "there is nothing is fear",
sad = "cheer up",
angry ="calm down now"))
print(
happy = "I am glad you are happy",
afraid = "there is nothing is fear",
sad = "cheer up",
angry ="calm down now")
angry ="calm down now"))'''
switch(type,
long = format(Sys.time(), "%A %B %d %Y"),
short = formaat(Sys.time(), "%m-%d-%y"),
cat(type, "is not a recognized type\n"))
mydate <- function(type="long") {
switch(type,
long = format(Sys.time(), "%A %B %d %Y"),
short = formaat(Sys.time(), "%m-%d-%y"),
cat(type, "is not a recognized type\n"))
}
mydate("long")
mydate("short")
mydate <- function(type="long") {
switch(type,
long = format(Sys.time(), "%A %B %d %Y"),
short = format(Sys.time(), "%m-%d-%y"),
cat(type, "is not a recognized type\n"))
}
mydate("short")
mydate()
myname <- function(type="string") {
switch(type,
name1 = "caofeifei",
name2 = "12345",
cat(type, "is weong"))
}
myname("caofeifei")
myname <- function(type="caofeifei") {
switch(type,
name1 = "caofeifei",
name2 = "12345",
cat(type, "is weong"))
}
myname("caofeifei")
myname <- function(type="name1") {
switch(type,
name1 = "caofeifei",
name2 = "12345",
cat(type, "is weong"))
}
myname("caofeifei")
myname()
myname("lining")
cars <- mtcars(1:5.1:4)
cars <- mtcars[1:5.1:4]
cars
t(cars)
options(digint=3)
options(digits ==3)
options(digits =3)
attach(mtcars)
aggdata <- aggregate(mtcars, by=list(cyl,gear), FUN = mean, na.mv = TRUE)
aggdata
install.packages("reshape2")
library(reshape2)
md <- melt(mydata,id = c("ID", "Time")
)
newdata <- dcast(md, ID-variable, mean)
newdata <- dcast(md, time()-variable, mean)
newdata <- dcast(md, time-variable, mean)
newdata <- dcast(md, time~variable, mean)
newdata <- dcast(md, Time~variable, mean)
newdata <- dcast(md, id-cariable, mean)
md <- melt(mydata,id = c("ID", "Time")
)
newdata <- dcast(md)
newdata <- dcast(md, ID-Time, mean)
newdata <- dcast(md, ID-Time, mean)m
md <- melt(mydata, id = c("ID", "Time"))
md
newdata <- dcast(md, Var1-variabe, mean)
newdata <- dcast(md, Var1-Var2, mean)
install.packages("vcd")
library(vcd)
install.packages("grid")
install.packages("grid")
library(vcd)
install.packages("grid")
install.packages("grid")
library("vcd")
library(grid)
library(vcd)
counts <- table(Arthritis$Improved)
counts
InsectSprays"plotrix"
install.packages("plotrix")
library(ggplot2)
library(tidyr)
library(dplyr)
library(dplyr)
wechat <- read.csv("/home/feier/python3/python爬虫/data.csv")
wechat <- read.csv("/home/feier/python3/python爬虫/data.csv", header = TRUE)
View(wechat)
wechat_liat <- wechat % > % group_by(Province, City) % > % summarise(count = n()) % > % arrange(desc(count))
wechat_liat <- wechat(group_by(Province, City).summarise(Count = n()).arrange(desc(Count))
wechat_liat <- wechat(group_by(Province, City).summarise(Count = n()).arrange(desc(Count)))
wechat_list <- wechat(group_by(Province, City))
View(wechat)
wechat_list <- group_by(wechat, c("Province", "City"))
wechat_list <- group_by(wechat, Province, City)
View(wechat_list)
wechat_list <- summarise(wechat, count = n())
wechat_list <- arrange(desc(count))
arrange(desc(count()))
wechat_list_ajst <- wechat_list[1:20,]
ggplot(wechat_list_ajst, aes(reorder(Province,Count),fill = City,Count)) + geom_bar(stat = "identity")+xlab("Province")+theme(text = element_text(family = "STHeiti"),axis.text.x = element_text(angle = 90)
)
data(nutrient, package = "flexclust")
install.packages("flexclust")
data(nutrient, package = "flexclust")
head(nutrient, 4)
d <- dist(nutrient)
as.matrix(d)[1:4,1:4]
data(nutrient, package = "flexclust")
rownames(nutrient) <- tolower(row.names(nutrient))
nutrient.scaled <- scale(nutrient)
d <- dist(nutrient, scale)
d <- dist(nutrient.scaled)
fit.average <- hclust(d, mathod="average")
fit.average <- hclust(d, method="average")
plot(fit.average, hang = -1, cex = .8, main = "alc")
library(Nbclust)
library(NbClust)
install.packages("NbClust")
library(NbClust)
devAskNewPage(ask=TRUE)
nc <- NbClust(nutrient.scaled, distance = "euclidean", min.nc = 2, max.nc = 15, method = "average")
table(nc$Best.n[1,])
barplot(table(nc$Best.n[1,]), xlab = "number", main = "cluster")
clustera <- cutree(fit.average, k=5)
table(clustera)
aggregate(nutrient, by = list(clustera=clustera), median)
aggregate(as.data.frame(nutrient.scaled), by=list(clustera=clustera), median)
plot(fit.average, hang = 1, cex=.8, main = "as")
rect.hclust(fit.average, k=5)
rect.hclust(fit.average, k=5)
plot(fit.average, hang = 1, cex=.8, main = "as")
plot(fit.average, hang = 1, cex=.8, main = "as")
rect.hclust(fit.average, k=5)
getwd()
chdir("Rtest")
mydataframe <- read.csv(TrainingSet.csv, header = TRUE)
mydataframe <- read.csv(python3/ebay网上拍卖数据分析/raw/TrainingSet.csv, header = TRUE)
mydataframe <- read.csv(/home/feier/python3/ebay网上拍卖数据分析/raw/TrainingSet.csv, header = TRUE)
mydataframe <- read.csv(home/feier/python3/ebay网上拍卖数据分析/raw/TrainingSet.csv, header = TRUE)
mydataframe <- read.csv(home/feier/python3/ebay网上拍卖数据分析/raw/TrainingSet.csv, header = TRUE)
setwd("python3/ebay网上拍卖数据分析/raw")
getwd()
mydataframe <- read.table(TrainingSet.csv, header = TRUE)
mydataframe <- read.table("TrainingSubset.csv", header = TRUE)
summary(mydataframe)
